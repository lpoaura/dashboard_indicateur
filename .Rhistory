server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
div(id="carte",
leafletOutput("mymap"))
)
server <- function(input, output, session) {
}
output$mymap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data =poly ,label = ~indic, smoothFactor = 3, fillOpacity = 1, fillColor = ~pal(indic),stroke = TRUE,
weight = 0.1, color = "black",
highlightOptions = highlightOptions(fillColor = "red",fillOpacity=1))
})
Carte <- st_read(con_gn, query = "select * from orb_indicateurs.mv_sraddet_ind_pole_geom WHERE annee_group = '2021 - 2025' AND declinaison ='Vertébrés'" )
a <- dbGetQuery(con_gn, "select * from orb_indicateurs.mv_sraddet_ind_pole_geom ")
f1 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Faible'")
m1 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Moyenne'")
b1 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Bonne'")
e1 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Ã‰levÃ©s'")
Carte <- st_read(con_gn, query = "select * from orb_indicateurs.mv_sraddet_ind_pole_geom WHERE annee_group = '2021 - 2025' AND declinaison ='Vertébrés'" ) [,1],[,2]
Carte <- st_read(con_gn, query = "select * from orb_indicateurs.mv_sraddet_ind_pole_geom WHERE annee_group = '2021 - 2025' AND declinaison ='Vertébrés'" ) [,1][,2]
indic <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole_geom WHERE annee_group = '2021 - 2025' AND declinaison = 'Vertébrés'")[,1]
pal <- colorFactor(
palette = topo.colors(5),
domain = indic)
poly <- st_transform(Carte, "+init=epsg:4326")
ui <- fluidPage(
div(id="carte",
leafletOutput("mymap"))
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data =poly ,label = ~indic, smoothFactor = 3, fillOpacity = 1, fillColor = ~pal(indic),stroke = TRUE,
weight = 0.1, color = "black",
highlightOptions = highlightOptions(fillColor = "red",fillOpacity=1))
})
}
shinyApp(ui, server)
Evo <- dbGetQuery(con_gn, "select * from orb_indicateurs.mv_sraddet_ind_esp_lrr")
count <- dbGetQuery(con_gn, "select DISTINCT annee from orb_indicateurs.mv_sraddet_ind_pole ORDER BY annee ASC")[,1]
Flore <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole WHERE declinaison = 'Flore et Fongus' ORDER BY annee ASC")[,1]
Vertebres <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole WHERE declinaison = 'Vertébrés' ORDER BY annee ASC")[,1]
Invertebres <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole WHERE declinaison = 'Invertébrés' ORDER BY annee ASC")[,1]
library(shiny)
qualite_labels = c('Faible', 'Moyenne', 'Bonne','Elevee')
f1 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Faible'")
m1 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Moyenne'")
b1 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Bonne'")
e1 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Ã‰levÃ©s'")
F1=f1[,1,1]
M1=m1[,1,1]
B1=b1[,1,1]
E1=e1[,1,1]
qualite1 = c(F1,M1,B1,E1)
df1 = data.frame(qualite_labels,qualite1)
f2 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Faible' AND declinaison ='Vertébrés'")
m2 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Moyenne' AND declinaison ='Vertébrés'")
b2 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Bonne' AND declinaison ='Vertébrés'")
e2 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Ã‰levÃ©s' AND declinaison ='Vertébrés'")
F2=f2[,1,1]
M2=m2[,1,1]
B2=b2[,1,1]
E2=e2[,1,1]
qualite2 = c(F2,M2,B2,E2)
df2 = data.frame(qualite_labels,qualite2)
f3 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Faible' AND declinaison ='Flore et Fongus'")
m3 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Moyenne' AND declinaison ='Flore et Fongus'")
b3 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Bonne' AND declinaison ='Flore et Fongus'")
e3 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Ã‰levÃ©s' AND declinaison ='Flore et Fongus'")
F3=f3[,1,1]
M3=m3[,1,1]
B3=b3[,1,1]
E3=e3[,1,1]
qualite3 = c(F3,M3,B3,E3)
df3 = data.frame(qualite_labels,qualite3)
f4 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Faible' AND declinaison ='Invertébrés'")
m4 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Moyenne' AND declinaison ='Invertébrés'")
b4 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Bonne' AND declinaison ='Invertébrés'")
e4 <- dbGetQuery(con_gn, "SELECT count(*) FROM orb_indicateurs.ind_connaissance_pole  WHERE ind_tot_group ='Ã‰levÃ©s' AND declinaison ='Invertébrés'")
F4=f4[,1,1]
M4=m4[,1,1]
B4=b4[,1,1]
E4=e4[,1,1]
qualite4 = c(F4,M4,B4,E4)
df4 = data.frame(qualite_labels,qualite4)
colors1 <- c('#ECE0F3','#DDC8E9','#C39AD6','#A56AC2')
colors2 <- c('#F8C04F','F9BA39','EE9039','#CC7B57')
colors3 <- c('#CED760','#C5CF39','#8AC154','#399E69')
colors4 <- c('#8BD6F0','#6CCAEB','#39AFDA','#398CB7')
ui <- fluidPage(
headerPanel('Connaissances'),
mainPanel(
actionButton("total", "General"),
actionButton("vertebres", "Vertebres"),
actionButton("flore", "Flore"),
actionButton("invertebres", "Invertebres"),
plotlyOutput('plot')
)
)
server <- function(input, output) {
observeEvent(input$total,{
plot1 <- plot_ly(data = df1, labels = ~qualite_labels, values = ~qualite1, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors1),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$plot <- renderPlotly({
plot1
})
})
observeEvent(input$vertebres,{
plot1 <- plot_ly(data = df2, labels = ~qualite_labels, values = ~qualite2, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors2),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$plot <- renderPlotly({
plot1
})
})
observeEvent(input$flore,{
plot1 <- plot_ly(data = df3, labels = ~qualite_labels, values = ~qualite3, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors3),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$plot <- renderPlotly({
plot1
})
})
observeEvent(input$invertebres,{
plot1 <- plot_ly(data = df4, labels = ~qualite_labels, values = ~qualite4, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors4),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$plot <- renderPlotly({
plot1
})
})
}
shinyApp(ui=ui,server=server)
Evo <- dbGetQuery(con_gn, "select * from orb_indicateurs.mv_sraddet_ind_esp_lrr")
count <- dbGetQuery(con_gn, "select DISTINCT annee from orb_indicateurs.mv_sraddet_ind_pole ORDER BY annee ASC")[,1]
Flore <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole WHERE declinaison = 'Flore et Fongus' ORDER BY annee ASC")[,1]
Vertebres <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole WHERE declinaison = 'Vertébrés' ORDER BY annee ASC")[,1]
Evo <- dbGetQuery(con_gn, "select * from orb_indicateurs.mv_sraddet_ind_esp")
count <- dbGetQuery(con_gn, "select DISTINCT annee from orb_indicateurs.mv_sraddet_ind_pole ORDER BY annee ASC")[,1]
Flore <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole WHERE declinaison = 'Flore et Fongus' ORDER BY annee ASC")[,1]
Vertebres <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole WHERE declinaison = 'Vertébrés' ORDER BY annee ASC")[,1]
Invertebres <- dbGetQuery(con_gn, "select nb_data_tot from orb_indicateurs.mv_sraddet_ind_pole WHERE declinaison = 'Invertébrés' ORDER BY annee ASC")[,1]
data <- data.frame(count,Flore,Vertebres,Invertebres)
fig <- plot_ly(data, x = ~count, y = ~Flore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69')) %>%
add_trace(y = ~Vertebres, name = 'Vertebres',marker = list(color = '#0099D0')) %>%
add_trace(y = ~Invertebres, name = 'Invertebres',marker = list(color = '#EA7200')) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
fig
ui <- fluidPage(
headerPanel('Connaissances'),
mainPanel(
actionButton("total", "General"),
actionButton("vertebres", "Vertebres"),
actionButton("flore", "Flore"),
actionButton("invertebres", "Invertebres"),
plotlyOutput('plot')
)
)
server <- function(input, output) {
observeEvent(input$total,{
plot1 <- plot_ly(data, x = ~count, y = ~Flore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69')) %>%
add_trace(y = ~Vertebres, name = 'Vertebres',marker = list(color = '#0099D0')) %>%
add_trace(y = ~Invertebres, name = 'Invertebres',marker = list(color = '#EA7200')) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
output$plot <- renderPlotly({
plot1
})
})
observeEvent(input$flore,{
plot1 <- plot_ly(data, x = ~count, y = ~Flore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69'))
output$plot <- renderPlotly({
plot1
})
})
observeEvent(input$vertebres,{
plot1 <- plot_ly(data, x = ~count, y = ~Vertebres, type = 'bar', name = 'Vertebres',marker = list(color = '#0099D0'))
output$plot <- renderPlotly({
plot1
})
})
observeEvent(input$invertebres,{
plot1 <- plot_ly(data, x = ~count, y = ~Invertebres, type = 'bar', name = 'Invertebres',marker = list(color = '#EA7200'))
output$plot <- renderPlotly({
plot1
})
})
}
shinyApp(ui=ui,server=server)
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/R/load_library.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_library.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_library.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_sql_request.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
ui <- fluidPage(
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/create_div.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
)
server <- function(input, output) {
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/affichage.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
}
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_sql_request.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_library.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_sql_request.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_sql_request.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_sql_request.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
ui <- fluidPage(
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/create_div.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
)
server <- function(input, output) {
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/affichage.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
}
shinyApp(ui=ui,server=server)
server <- function(input, output) {
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/affichage.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
}
shinyApp(ui=ui,server=server)
ui <- fluidPage(
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/create_div.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
)
server <- function(input, output) {
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/affichage.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
}
shinyApp(ui=ui,server=server)
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_library.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_sql_request.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/create_div.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
divTotal <- div(id = "total",
divBouttons,
divCarte,
divHist,
divPie)
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_library.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_sql_request.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/create_div.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
divTotal <- div(id = "total",
divBouttons,
divCarte,
divHist,
divPie)
ui <- fluidPage(
divTotal
)
server <- function(input, output) {
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/affichage.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
}
shinyApp(ui=ui,server=server)
server <- function(input, output) {
##affichage carte
output$mymap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data =poly ,label = ~indic, smoothFactor = 3, fillOpacity = 1, fillColor = ~pal(indic),stroke = TRUE,
weight = 0.1, color = "black",
highlightOptions = highlightOptions(fillColor = "red",fillOpacity=1))
})
##affichage piechart
observeEvent(input$total,{
plot <- plot_ly(data = dftotal, labels = ~qualite_labels, values = ~qualiteTotal, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors1),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$vertebres,{
plot <- plot_ly(data = dfvertebres, labels = ~qualite_labels, values = ~qualiteVertebres, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors2),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$flore,{
plot <- plot_ly(data = dfflore, labels = ~qualite_labels, values = ~qualiteFlore, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors3),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$invertebres,{
plot <- plot_ly(data = dfinvertebres, labels = ~qualite_labels, values = ~qualiteInvertebres, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors4),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
##affichage hist
observeEvent(input$total,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histFlore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69')) %>%
add_trace(y = ~histVertebres, name = 'Vertebres',marker = list(color = '#0099D0')) %>%
add_trace(y = ~histInvertebres, name = 'Invertebres',marker = list(color = '#EA7200')) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
output$hist <- renderPlotly({plot1})
})
observeEvent(input$flore,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histFlore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69'))
output$hist <- renderPlotly({plot1})
})
observeEvent(input$vertebres,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histVertebres, type = 'bar', name = 'Vertebres',marker = list(color = '#0099D0'))
output$hist <- renderPlotly({plot1})
})
observeEvent(input$invertebres,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histInvertebres, type = 'bar', name = 'Invertebres',marker = list(color = '#EA7200'))
output$hist <- renderPlotly({plot1})
})
}
shinyApp(ui=ui,server=server)
divTotal <- div(id = "total",
divBouttons,
divCarte,
divHist,
divPie)
ui <- fluidPage(
divTotal
)
server <- function(input, output) {
##affichage carte
output$mymap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data =poly ,label = ~indic, smoothFactor = 3, fillOpacity = 1, fillColor = ~pal(indic),stroke = TRUE,
weight = 0.1, color = "black",
highlightOptions = highlightOptions(fillColor = "red",fillOpacity=1))
})
##affichage piechart
observeEvent(input$total,{
plot <- plot_ly(data = dftotal, labels = ~qualite_labels, values = ~qualiteTotale, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors1),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$vertebres,{
plot <- plot_ly(data = dfvertebres, labels = ~qualite_labels, values = ~qualiteVertebres, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors2),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$flore,{
plot <- plot_ly(data = dfflore, labels = ~qualite_labels, values = ~qualiteFlore, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors3),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$invertebres,{
plot <- plot_ly(data = dfinvertebres, labels = ~qualite_labels, values = ~qualiteInvertebres, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors4),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
##affichage hist
observeEvent(input$total,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histFlore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69')) %>%
add_trace(y = ~histVertebres, name = 'Vertebres',marker = list(color = '#0099D0')) %>%
add_trace(y = ~histInvertebres, name = 'Invertebres',marker = list(color = '#EA7200')) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
output$hist <- renderPlotly({plot1})
})
observeEvent(input$flore,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histFlore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69'))
output$hist <- renderPlotly({plot1})
})
observeEvent(input$vertebres,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histVertebres, type = 'bar', name = 'Vertebres',marker = list(color = '#0099D0'))
output$hist <- renderPlotly({plot1})
})
observeEvent(input$invertebres,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histInvertebres, type = 'bar', name = 'Invertebres',marker = list(color = '#EA7200'))
output$hist <- renderPlotly({plot1})
})
}
shinyApp(ui=ui,server=server)
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_library.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/load_sql_request.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
getwd() %>% ## prise du chemin de dossier actuelle
paste0("/Trucs/Sprint2/create_div.R") %>% ## indication du nom du fichier
source() ## lecture du fichier
divTotal <- div(id = "total",
divBouttons,
divCarte,
divHist,
divPie)
ui <- fluidPage(
divTotal
)
server <- function(input, output) {
##affichage carte
output$mymap <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data =poly ,label = ~indic, smoothFactor = 3, fillOpacity = 1, fillColor = ~pal(indic),stroke = TRUE,
weight = 0.1, color = "black",
highlightOptions = highlightOptions(fillColor = "red",fillOpacity=1))
})
##affichage piechart
observeEvent(input$total,{
plot <- plot_ly(data = dftotal, labels = ~qualite_labels, values = ~qualiteTotale, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors1),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$vertebres,{
plot <- plot_ly(data = dfvertebres, labels = ~qualite_labels, values = ~qualiteVertebres, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors4),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$flore,{
plot <- plot_ly(data = dfflore, labels = ~qualite_labels, values = ~qualiteFlore, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors3),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
observeEvent(input$invertebres,{
plot <- plot_ly(data = dfinvertebres, labels = ~qualite_labels, values = ~qualiteInvertebres, type = "pie", hole=0.6,
textinfo = "percent",
marker = list(colors = colors2),
insidetextorientation = "horizontal")  %>% layout(title = 'Proportion de mailles par niveau de connaissances')
output$pie <- renderPlotly({plot})
})
##affichage hist
observeEvent(input$total,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histFlore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69')) %>%
add_trace(y = ~histVertebres, name = 'Vertebres',marker = list(color = '#0099D0')) %>%
add_trace(y = ~histInvertebres, name = 'Invertebres',marker = list(color = '#EA7200')) %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
output$hist <- renderPlotly({plot1})
})
observeEvent(input$flore,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histFlore, type = 'bar', name = 'Flore et Fongus',marker = list(color = '#399E69'))
output$hist <- renderPlotly({plot1})
})
observeEvent(input$vertebres,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histVertebres, type = 'bar', name = 'Vertebres',marker = list(color = '#0099D0'))
output$hist <- renderPlotly({plot1})
})
observeEvent(input$invertebres,{
plot1 <- plot_ly(dataHist, x = ~count, y = ~histInvertebres, type = 'bar', name = 'Invertebres',marker = list(color = '#EA7200'))
output$hist <- renderPlotly({plot1})
})
}
shinyApp(ui=ui,server=server)
